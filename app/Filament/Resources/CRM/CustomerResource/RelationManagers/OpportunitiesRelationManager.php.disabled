<?php

namespace App\Filament\Resources\CRM\CustomerResource\RelationManagers;

use App\Models\Pipeline;
use App\Models\Stage;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Resources\RelationManagers\RelationManager;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;

class OpportunitiesRelationManager extends RelationManager
{
    protected static string $relationship = 'opportunities';

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Select::make('pipeline_id')
                    ->label('Pipeline')
                    ->options(Pipeline::pluck('name', 'id'))
                    ->default(Pipeline::where('is_default', true)->first()?->id)
                    ->required()
                    ->live()
                    ->afterStateUpdated(fn(Forms\Set $set) => $set('stage_id', null)),

                Forms\Components\Select::make('stage_id')
                    ->label('Stage')
                    ->options(fn(Get $get) => Stage::where('pipeline_id', $get('pipeline_id'))->orderBy('position')->pluck('name', 'id'))
                    ->required()
                    ->disabled(fn(Get $get) => !$get('pipeline_id')),

                Forms\Components\TextInput::make('title')
                    ->required()
                    ->maxLength(255)
                    ->columnSpanFull(),

                Forms\Components\TextInput::make('amount')
                    ->numeric()
                    ->prefix('$')
                    ->default(0)
                    ->required(),

                Forms\Components\DatePicker::make('expected_close_date')
                    ->label('Expected Close Date'),

                Forms\Components\Select::make('owner_id')
                    ->label('Owner')
                    ->relationship('owner', 'name')
                    ->searchable()
                    ->preload()
                    ->default(fn() => auth()->id())
                    ->required(),

                Forms\Components\Textarea::make('description')
                    ->rows(3)
                    ->columnSpanFull(),
            ])
            ->columns(2);
    }

    public function table(Table $table): Table
    {
        return $table
            ->recordTitleAttribute('title')
            ->columns([
                Tables\Columns\TextColumn::make('title')
                    ->searchable()
                    ->sortable(),

                Tables\Columns\TextColumn::make('pipeline.name')
                    ->badge(),

                Tables\Columns\TextColumn::make('stage.name')
                    ->badge()
                    ->color(fn($record) => match (true) {
                        $record->stage->is_won => 'success',
                        $record->stage->is_lost => 'danger',
                        $record->stage->forecast_category === 'Commit' => 'warning',
                        default => 'info',
                    }),

                Tables\Columns\TextColumn::make('amount')
                    ->money('usd')
                    ->sortable(),

                Tables\Columns\TextColumn::make('status')
                    ->badge()
                    ->color(fn(string $state) => match ($state) {
                        'won' => 'success',
                        'lost' => 'danger',
                        default => 'info',
                    }),

                Tables\Columns\TextColumn::make('expected_close_date')
                    ->date()
                    ->sortable(),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('status')
                    ->options([
                        'open' => 'Open',
                        'won' => 'Won',
                        'lost' => 'Lost',
                    ]),
            ])
            ->headerActions([
                Tables\Actions\CreateAction::make()
                    ->mutateFormDataUsing(function (array $data): array {
                        $data['customer_id'] = $this->getOwnerRecord()->id;
                        $data['created_by'] = auth()->id();
                        $data['updated_by'] = auth()->id();
                        return $data;
                    }),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->defaultSort('created_at', 'desc');
    }
}
