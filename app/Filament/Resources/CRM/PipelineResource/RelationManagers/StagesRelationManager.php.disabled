<?php

namespace App\Filament\Resources\CRM\PipelineResource\RelationManagers;

use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\RelationManagers\RelationManager;
use Filament\Tables;
use Filament\Tables\Table;

class StagesRelationManager extends RelationManager
{
    protected static string $relationship = 'stages';

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\TextInput::make('name')
                    ->required()
                    ->maxLength(255),

                Forms\Components\TextInput::make('probability_default')
                    ->label('Default Probability (%)')
                    ->numeric()
                    ->minValue(0)
                    ->maxValue(100)
                    ->default(0)
                    ->suffix('%')
                    ->required(),

                Forms\Components\Select::make('forecast_category')
                    ->options([
                        'Pipeline' => 'Pipeline',
                        'BestCase' => 'Best Case',
                        'Commit' => 'Commit',
                        'Closed' => 'Closed',
                    ])
                    ->default('Pipeline')
                    ->required(),

                Forms\Components\Toggle::make('is_won')
                    ->label('Winning Stage')
                    ->helperText('Automatically mark opportunities as won when moved to this stage'),

                Forms\Components\Toggle::make('is_lost')
                    ->label('Losing Stage')
                    ->helperText('Automatically mark opportunities as lost when moved to this stage'),

                Forms\Components\TextInput::make('position')
                    ->numeric()
                    ->default(0)
                    ->helperText('Used for ordering stages in the pipeline'),
            ])
            ->columns(2);
    }

    public function table(Table $table): Table
    {
        return $table
            ->recordTitleAttribute('name')
            ->columns([
                Tables\Columns\TextColumn::make('position')
                    ->sortable()
                    ->width('60px'),

                Tables\Columns\TextColumn::make('name')
                    ->searchable()
                    ->sortable()
                    ->weight('medium'),

                Tables\Columns\TextColumn::make('probability_default')
                    ->label('Probability')
                    ->suffix('%')
                    ->sortable(),

                Tables\Columns\BadgeColumn::make('forecast_category')
                    ->label('Category')
                    ->colors([
                        'info' => 'Pipeline',
                        'warning' => 'BestCase',
                        'success' => 'Commit',
                        'gray' => 'Closed',
                    ]),

                Tables\Columns\IconColumn::make('is_won')
                    ->label('Won')
                    ->boolean()
                    ->trueIcon('heroicon-o-check-circle')
                    ->falseIcon('heroicon-o-x-circle')
                    ->trueColor('success')
                    ->falseColor('gray'),

                Tables\Columns\IconColumn::make('is_lost')
                    ->label('Lost')
                    ->boolean()
                    ->trueIcon('heroicon-o-x-circle')
                    ->falseIcon('heroicon-o-check-circle')
                    ->trueColor('danger')
                    ->falseColor('gray'),

                Tables\Columns\TextColumn::make('opportunities_count')
                    ->counts('opportunities')
                    ->label('Opportunities')
                    ->badge()
                    ->color('success'),
            ])
            ->filters([
                //
            ])
            ->headerActions([
                Tables\Actions\CreateAction::make()
                    ->mutateFormDataUsing(function (array $data): array {
                        $data['pipeline_id'] = $this->getOwnerRecord()->id;
                        return $data;
                    }),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->defaultSort('position')
            ->reorderable('position');
    }
}
